
#pragma once

#include <curses.h> 

namespace clg_cursescpp {

  typedef WINDOW* WIN;

  template<typename T>
  struct PairNum {
    T _x;
    T _y;
  };

  template<typename T1, typename T2>
  PairNum<T1> convertStructPairNum(PairNum<T2> data);

  template<typename T1, typename T2>
  T1 convertTypeData(T2 data);



  class Window {
    protected:
      static const PairNum<int> NULL_XY;

      WIN _win;
      PairNum<short> _xy; 
    
      inline void print(const char *text, va_list args, 
          PairNum<int> xy = NULL_XY);

    public:
      Window(const Window &);
      Window(Window &&other) = delete;
      Window &operator=(const Window &);
      Window &operator=(Window &&) noexcept;

      Window();
      Window(const Window* window);
      Window(const PairNum<short> xy, WIN window);
      virtual ~Window();

      void box(const unsigned a, 
                const unsigned b);
      int getChar();
      void close();
      void refresh();

      int getMaxX();
      int getMaxY();
      PairNum<int> getMaxXY();

      short getX();
      short getY();

      void movePrintWin(PairNum<int> xy, 
          const char* text, ...);
      void printWin(const char* text, ...);

      virtual void textSelectionTable();
      virtual void textSelection();
      virtual void update();

      Window createWindow(
            const PairNum<int> xy, 
            const PairNum<int> widthAndLength);
      
  };




}